Xshell for Xmanager Enterprise 5 (Build 0687)
Copyright (c) 2002-2015 NetSarang Computer, Inc. All rights reserved.

Type `help' to learn how to use Xshell prompt.
[c:\~]$ 

Host 'programming.postech.ac.kr' resolved to 141.223.2.22.
Connecting to 141.223.2.22:2022...
Connection established.
To escape to local shell, press 'Ctrl+Alt+]'.

Last login: Wed Sep 19 18:56:02 2018 from mm1-pc27.postech.ac.kr
=========================================
      Welcome to programming server
  Inquiry: 279-2520, hemos@postech.ac.kr
=========================================
[eric9709@programming ~]$ cd CSED211
[eric9709@programming CSED211]$ cd Lab3
[eric9709@programming Lab3]$ ls
practice_gdb
[eric9709@programming Lab3]$ tar -xvf bomb60.tar.
tar: bomb60.tar.: Cannot open: 그런 파일이나 디렉토리가 없음
tar: Error is not recoverable: exiting now
[eric9709@programming Lab3]$ tar -xvf bomb60.tar
bomb60/
bomb60/bomb.c
bomb60/bomb
bomb60/ID
[eric9709@programming Lab3]$ ls
bomb60  bomb60.tar  practice_gdb
[eric9709@programming Lab3]$ cd bomb60/
[eric9709@programming bomb60]$ ls
ID  bomb  bomb.c
[eric9709@programming bomb60]$ cat bomb.c
/***************************************************************************
 * Dr. Evil's Insidious Bomb, Version 1.1
 * Copyright 2011, Dr. Evil Incorporated. All rights reserved.
 *
 * LICENSE:
 *
 * Dr. Evil Incorporated (the PERPETRATOR) hereby grants you (the
 * VICTIM) explicit permission to use this bomb (the BOMB).  This is a
 * time limited license, which expires on the death of the VICTIM.
 * The PERPETRATOR takes no responsibility for damage, frustration,
 * insanity, bug-eyes, carpal-tunnel syndrome, loss of sleep, or other
 * harm to the VICTIM.  Unless the PERPETRATOR wants to take credit,
 * that is.  The VICTIM may not distribute this bomb source code to
 * any enemies of the PERPETRATOR.  No VICTIM may debug,
 * reverse-engineer, run "strings" on, decompile, decrypt, or use any
 * other technique to gain knowledge of and defuse the BOMB.  BOMB
 * proof clothing may not be worn when handling this program.  The
 * PERPETRATOR will not apologize for the PERPETRATOR's poor sense of
 * humor.  This license is null and void where the BOMB is prohibited
 * by law.
 ***************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include "support.h"
#include "phases.h"

/* 
 * Note to self: Remember to erase this file so my victims will have no
 * idea what is going on, and so they will all blow up in a
 * spectaculary fiendish explosion. -- Dr. Evil 
 */

FILE *infile;

int main(int argc, char *argv[])
{
    char *input;

    /* Note to self: remember to port this bomb to Windows and put a 
     * fantastic GUI on it. */

    /* When run with no arguments, the bomb reads its input lines 
     * from standard input. */
    if (argc == 1) {  
	infile = stdin;
    } 

    /* When run with one argument <file>, the bomb reads from <file> 
     * until EOF, and then switches to standard input. Thus, as you 
     * defuse each phase, you can add its defusing string to <file> and
     * avoid having to retype it. */
    else if (argc == 2) {
	if (!(infile = fopen(argv[1], "r"))) {
	    printf("%s: Error: Couldn't open %s\n", argv[0], argv[1]);
	    exit(8);
	}
    }

    /* You can't call the bomb with more than 1 command line argument. */
    else {
	printf("Usage: %s [<input_file>]\n", argv[0]);
	exit(8);
    }

    /* Do all sorts of secret stuff that makes the bomb harder to defuse. */
    initialize_bomb();

    printf("Welcome to my fiendish little bomb. You have 6 phases with\n");
    printf("which to blow yourself up. Have a nice day!\n");

    /* Hmm...  Six phases must be more secure than one phase! */
    input = read_line();             /* Get input                   */
    phase_1(input);                  /* Run the phase               */
    phase_defused();                 /* Drat!  They figured it out!
				      * Let me know how they did it. */
    printf("Phase 1 defused. How about the next one?\n");

    /* The second phase is harder.  No one will ever figure out
     * how to defuse this... */
    input = read_line();
    phase_2(input);
    phase_defused();
    printf("That's number 2.  Keep going!\n");

    /* I guess this is too easy so far.  Some more complex code will
     * confuse people. */
    input = read_line();
    phase_3(input);
    phase_defused();
    printf("Halfway there!\n");

    /* Oh yeah?  Well, how good is your math?  Try on this saucy problem! */
    input = read_line();
    phase_4(input);
    phase_defused();
    printf("So you got that one.  Try this one.\n");
    
    /* Round and 'round in memory we go, where we stop, the bomb blows! */
    input = read_line();
    phase_5(input);
    phase_defused();
    printf("Good work!  On to the next...\n");

    /* This phase will never be used, since no one will get past the
     * earlier ones.  But just in case, make this one extra hard. */
    input = read_line();
    phase_6(input);
    phase_defused();

    /* Wow, they got it!  But isn't something... missing?  Perhaps
     * something they overlooked?  Mua ha ha ha ha! */
    
    return 0;
}
[eric9709@programming bomb60]$ gdb 
ID      bomb    bomb.c  
[eric9709@programming bomb60]$ gdb bomb
GNU gdb (GDB) CentOS (7.0.1-45.el5.centos)
Copyright (C) 2009 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/std/eric9709/CSED211/Lab3/bomb60/bomb...done.
(gdb) disas main
Dump of assembler code for function main:
0x0000000000400c98 <main+0>:	push   %rbx
0x0000000000400c99 <main+1>:	mov    %rsi,%rbx
0x0000000000400c9c <main+4>:	cmp    $0x1,%edi
0x0000000000400c9f <main+7>:	jne    0x400cb1 <main+25>
0x0000000000400ca1 <main+9>:	mov    0x202c78(%rip),%rax        # 0x603920 <stdin@@GLIBC_2.2.5>
0x0000000000400ca8 <main+16>:	mov    %rax,0x202c99(%rip)        # 0x603948 <infile>
0x0000000000400caf <main+23>:	jmp    0x400d07 <main+111>
0x0000000000400cb1 <main+25>:	cmp    $0x2,%edi
0x0000000000400cb4 <main+28>:	jne    0x400ceb <main+83>
0x0000000000400cb6 <main+30>:	mov    $0x402290,%esi
0x0000000000400cbb <main+35>:	mov    0x8(%rbx),%rdi
0x0000000000400cbf <main+39>:	callq  0x400a80 <fopen@plt>
0x0000000000400cc4 <main+44>:	mov    %rax,0x202c7d(%rip)        # 0x603948 <infile>
0x0000000000400ccb <main+51>:	test   %rax,%rax
0x0000000000400cce <main+54>:	jne    0x400d07 <main+111>
0x0000000000400cd0 <main+56>:	mov    0x8(%rbx),%rdx
0x0000000000400cd4 <main+60>:	mov    (%rbx),%rsi
0x0000000000400cd7 <main+63>:	mov    $0x402292,%edi
0x0000000000400cdc <main+68>:	callq  0x400a10 <printf@plt>
0x0000000000400ce1 <main+73>:	mov    $0x8,%edi
0x0000000000400ce6 <main+78>:	callq  0x400a60 <exit@plt>
0x0000000000400ceb <main+83>:	mov    (%rsi),%rsi
0x0000000000400cee <main+86>:	mov    $0x4022af,%edi
0x0000000000400cf3 <main+91>:	mov    $0x0,%eax
0x0000000000400cf8 <main+96>:	callq  0x400a10 <printf@plt>
0x0000000000400cfd <main+101>:	mov    $0x8,%edi
0x0000000000400d02 <main+106>:	callq  0x400a60 <exit@plt>
---Type <return> to continue, or q <return> to quit---
0x0000000000400d07 <main+111>:	callq  0x401529 <initialize_bomb>
0x0000000000400d0c <main+116>:	mov    $0x402318,%edi
0x0000000000400d11 <main+121>:	callq  0x400a50 <puts@plt>
0x0000000000400d16 <main+126>:	mov    $0x402358,%edi
0x0000000000400d1b <main+131>:	callq  0x400a50 <puts@plt>
0x0000000000400d20 <main+136>:	callq  0x4013ff <read_line>
0x0000000000400d25 <main+141>:	mov    %rax,%rdi
0x0000000000400d28 <main+144>:	callq  0x40104d <phase_1>
0x0000000000400d2d <main+149>:	callq  0x4012a3 <phase_defused>
0x0000000000400d32 <main+154>:	mov    $0x402388,%edi
0x0000000000400d37 <main+159>:	callq  0x400a50 <puts@plt>
0x0000000000400d3c <main+164>:	callq  0x4013ff <read_line>
0x0000000000400d41 <main+169>:	mov    %rax,%rdi
0x0000000000400d44 <main+172>:	callq  0x400fa8 <phase_2>
0x0000000000400d49 <main+177>:	callq  0x4012a3 <phase_defused>
0x0000000000400d4e <main+182>:	mov    $0x4022c9,%edi
0x0000000000400d53 <main+187>:	callq  0x400a50 <puts@plt>
0x0000000000400d58 <main+192>:	callq  0x4013ff <read_line>
0x0000000000400d5d <main+197>:	mov    %rax,%rdi
0x0000000000400d60 <main+200>:	callq  0x4010ca <phase_3>
0x0000000000400d65 <main+205>:	callq  0x4012a3 <phase_defused>
0x0000000000400d6a <main+210>:	mov    $0x4022e7,%edi
0x0000000000400d6f <main+215>:	callq  0x400a50 <puts@plt>
0x0000000000400d74 <main+220>:	callq  0x4013ff <read_line>
0x0000000000400d79 <main+225>:	mov    %rax,%rdi
0x0000000000400d7c <main+228>:	callq  0x401069 <phase_4>
0x0000000000400d81 <main+233>:	callq  0x4012a3 <phase_defused>
0x0000000000400d86 <main+238>:	mov    $0x4023b8,%edi
---Type <return> to continue, or q <return> to quit---
0x0000000000400d8b <main+243>:	callq  0x400a50 <puts@plt>
0x0000000000400d90 <main+248>:	callq  0x4013ff <read_line>
0x0000000000400d95 <main+253>:	mov    %rax,%rdi
0x0000000000400d98 <main+256>:	callq  0x400ff1 <phase_5>
0x0000000000400d9d <main+261>:	callq  0x4012a3 <phase_defused>
0x0000000000400da2 <main+266>:	mov    $0x4022f6,%edi
0x0000000000400da7 <main+271>:	callq  0x400a50 <puts@plt>
0x0000000000400dac <main+276>:	callq  0x4013ff <read_line>
0x0000000000400db1 <main+281>:	mov    %rax,%rdi
0x0000000000400db4 <main+284>:	callq  0x400e93 <phase_6>
0x0000000000400db9 <main+289>:	callq  0x4012a3 <phase_defused>
0x0000000000400dbe <main+294>:	mov    $0x0,%eax
0x0000000000400dc3 <main+299>:	pop    %rbx
0x0000000000400dc4 <main+300>:	retq   
End of assembler dump.
(gdb) disas phase_1
Dump of assembler code for function phase_1:
0x000000000040104d <phase_1+0>:	sub    $0x8,%rsp
0x0000000000401051 <phase_1+4>:	mov    $0x402408,%esi
0x0000000000401056 <phase_1+9>:	callq  0x40123f <strings_not_equal>
0x000000000040105b <phase_1+14>:	test   %eax,%eax
0x000000000040105d <phase_1+16>:	je     0x401064 <phase_1+23>
0x000000000040105f <phase_1+18>:	callq  0x40131b <explode_bomb>
0x0000000000401064 <phase_1+23>:	add    $0x8,%rsp
0x0000000000401068 <phase_1+27>:	retq   
End of assembler dump.
(gdb) x/s 0x401064
0x401064 <phase_1+23>:	 "H\203\304\b\303H\203\354\030H\215L$\020H\215T$\024얠$@"
(gdb) x/s 0x40123
0x40123:	 <Address 0x40123 out of bounds>
(gdb) x/s 0x40123f
0x40123f <strings_not_equal>:	 "ATUSH\211\375I\211淸\322\377\377\377\211\303L\211預\310\377\377\377\071\303u2\017\266E"
(gdb) disas strings_not_equal
Dump of assembler code for function strings_not_equal:
0x000000000040123f <strings_not_equal+0>:	push   %r12
0x0000000000401241 <strings_not_equal+2>:	push   %rbp
0x0000000000401242 <strings_not_equal+3>:	push   %rbx
0x0000000000401243 <strings_not_equal+4>:	mov    %rdi,%rbp
0x0000000000401246 <strings_not_equal+7>:	mov    %rsi,%r12
0x0000000000401249 <strings_not_equal+10>:	callq  0x401220 <string_length>
0x000000000040124e <strings_not_equal+15>:	mov    %eax,%ebx
0x0000000000401250 <strings_not_equal+17>:	mov    %r12,%rdi
0x0000000000401253 <strings_not_equal+20>:	callq  0x401220 <string_length>
0x0000000000401258 <strings_not_equal+25>:	cmp    %eax,%ebx
0x000000000040125a <strings_not_equal+27>:	jne    0x40128e <strings_not_equal+79>
0x000000000040125c <strings_not_equal+29>:	movzbl 0x0(%rbp),%eax
0x0000000000401260 <strings_not_equal+33>:	test   %al,%al
0x0000000000401262 <strings_not_equal+35>:	je     0x401295 <strings_not_equal+86>
0x0000000000401264 <strings_not_equal+37>:	mov    %rbp,%rcx
0x0000000000401267 <strings_not_equal+40>:	mov    %r12,%rdx
0x000000000040126a <strings_not_equal+43>:	cmp    (%r12),%al
0x000000000040126e <strings_not_equal+47>:	je     0x401283 <strings_not_equal+68>
0x0000000000401270 <strings_not_equal+49>:	jmp    0x40128e <strings_not_equal+79>
0x0000000000401272 <strings_not_equal+51>:	movzbl 0x1(%rdx),%eax
0x0000000000401276 <strings_not_equal+55>:	add    $0x1,%rcx
0x000000000040127a <strings_not_equal+59>:	add    $0x1,%rdx
0x000000000040127e <strings_not_equal+63>:	cmp    %al,%sil
0x0000000000401281 <strings_not_equal+66>:	jne    0x40128e <strings_not_equal+79>
0x0000000000401283 <strings_not_equal+68>:	movzbl 0x1(%rcx),%esi
0x0000000000401287 <strings_not_equal+72>:	test   %sil,%sil
0x000000000040128a <strings_not_equal+75>:	jne    0x401272 <strings_not_equal+51>
---Type <return> to continue, or q <return> to quit---
0x000000000040128c <strings_not_equal+77>:	jmp    0x401295 <strings_not_equal+86>
0x000000000040128e <strings_not_equal+79>:	mov    $0x1,%eax
0x0000000000401293 <strings_not_equal+84>:	jmp    0x40129a <strings_not_equal+91>
0x0000000000401295 <strings_not_equal+86>:	mov    $0x0,%eax
0x000000000040129a <strings_not_equal+91>:	pop    %rbx
0x000000000040129b <strings_not_equal+92>:	pop    %rbp
0x000000000040129c <strings_not_equal+93>:	pop    %r12
0x000000000040129e <strings_not_equal+95>:	xchg   %ax,%ax
0x00000000004012a0 <strings_not_equal+97>:	retq   
End of assembler dump.
(gdb) x/s 0x402408
0x402408 <__dso_handle+384>:	 "He is evil and fits easily into most overhead storage bins."
(gdb) Quit
(gdb) quit
[eric9709@programming bomb60]$ gdb bomb
GNU gdb (GDB) CentOS (7.0.1-45.el5.centos)
Copyright (C) 2009 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/std/eric9709/CSED211/Lab3/bomb60/bomb...done.
(gdb) disas phase_defused
Dump of assembler code for function phase_defused:
0x00000000004012a3 <phase_defused+0>:	push   %rbx
0x00000000004012a4 <phase_defused+1>:	sub    $0x60,%rsp
0x00000000004012a8 <phase_defused+5>:	cmpl   $0x6,0x202695(%rip)        # 0x603944 <num_input_strings>
0x00000000004012af <phase_defused+12>:	jne    0x401315 <phase_defused+114>
0x00000000004012b1 <phase_defused+14>:	lea    0x10(%rsp),%rbx
0x00000000004012b6 <phase_defused+19>:	lea    0x8(%rsp),%rcx
0x00000000004012bb <phase_defused+24>:	lea    0xc(%rsp),%rdx
0x00000000004012c0 <phase_defused+29>:	mov    %rbx,%r8
0x00000000004012c3 <phase_defused+32>:	mov    $0x4024b0,%esi
0x00000000004012c8 <phase_defused+37>:	mov    $0x603a50,%edi
0x00000000004012cd <phase_defused+42>:	mov    $0x0,%eax
0x00000000004012d2 <phase_defused+47>:	callq  0x400af0 <sscanf@plt>
0x00000000004012d7 <phase_defused+52>:	cmp    $0x3,%eax
0x00000000004012da <phase_defused+55>:	jne    0x40130b <phase_defused+104>
0x00000000004012dc <phase_defused+57>:	mov    $0x4024b9,%esi
0x00000000004012e1 <phase_defused+62>:	mov    %rbx,%rdi
0x00000000004012e4 <phase_defused+65>:	callq  0x40123f <strings_not_equal>
0x00000000004012e9 <phase_defused+70>:	test   %eax,%eax
0x00000000004012eb <phase_defused+72>:	jne    0x40130b <phase_defused+104>
0x00000000004012ed <phase_defused+74>:	mov    $0x4025d0,%edi
0x00000000004012f2 <phase_defused+79>:	callq  0x400a50 <puts@plt>
0x00000000004012f7 <phase_defused+84>:	mov    $0x4025f8,%edi
0x00000000004012fc <phase_defused+89>:	callq  0x400a50 <puts@plt>
0x0000000000401301 <phase_defused+94>:	mov    $0x0,%eax
0x0000000000401306 <phase_defused+99>:	callq  0x400e3e <secret_phase>
0x000000000040130b <phase_defused+104>:	mov    $0x402630,%edi
0x0000000000401310 <phase_defused+109>:	callq  0x400a50 <puts@plt>
---Type <return> to continue, or q <return> to quit---
0x0000000000401315 <phase_defused+114>:	add    $0x60,%rsp
0x0000000000401319 <phase_defused+118>:	pop    %rbx
0x000000000040131a <phase_defused+119>:	retq   
End of assembler dump.
(gdb) b* 0x400d32
Breakpoint 1 at 0x400d32: file bomb.c, line 77.
(gdb) r
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb 
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x2aaaaaaab000
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
He is evil and fits easily into most overhead storage bins.

Breakpoint 1, main (argc=<value optimized out>, argv=0x7fffffffea68) at bomb.c:77
77	    printf("Phase 1 defused. How about the next one?\n");
(gdb) info reg
rax            0x0	0
rbx            0x7fffffffea68	140737488349800
rcx            0x60399a	6306202
rdx            0x402442	4203586
rsi            0x0	0
rdi            0x402408	4203528
rbp            0x0	0x0
rsp            0x7fffffffe980	0x7fffffffe980
r8             0xa2e736e69622065	733650707359604837
r9             0x206f746e6920796c	2337214749187537260
r10            0x0	0
r11            0x32cca29c70	218181573744
r12            0x0	0
r13            0x7fffffffea60	140737488349792
r14            0x0	0
r15            0x0	0
rip            0x400d32	0x400d32 <main+154>
eflags         0x202	[ IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
fctrl          0x37f	895
fstat          0x0	0
ftag           0xffff	65535
fiseg          0x0	0
---Type <return> to continue, or q <return> to quit---q
Quit
(gdb) disas phase_2
Dump of assembler code for function phase_2:
0x0000000000400fa8 <phase_2+0>:	push   %rbp
0x0000000000400fa9 <phase_2+1>:	push   %rbx
0x0000000000400faa <phase_2+2>:	sub    $0x28,%rsp
0x0000000000400fae <phase_2+6>:	mov    %rsp,%rsi
0x0000000000400fb1 <phase_2+9>:	callq  0x40133d <read_six_numbers>
0x0000000000400fb6 <phase_2+14>:	cmpl   $0x0,(%rsp)
0x0000000000400fba <phase_2+18>:	jne    0x400fc3 <phase_2+27>
0x0000000000400fbc <phase_2+20>:	cmpl   $0x1,0x4(%rsp)
0x0000000000400fc1 <phase_2+25>:	je     0x400fc8 <phase_2+32>
0x0000000000400fc3 <phase_2+27>:	callq  0x40131b <explode_bomb>
0x0000000000400fc8 <phase_2+32>:	lea    0x8(%rsp),%rbx
0x0000000000400fcd <phase_2+37>:	lea    0x18(%rsp),%rbp
0x0000000000400fd2 <phase_2+42>:	mov    -0x8(%rbx),%eax
0x0000000000400fd5 <phase_2+45>:	add    -0x4(%rbx),%eax
0x0000000000400fd8 <phase_2+48>:	cmp    %eax,(%rbx)
0x0000000000400fda <phase_2+50>:	je     0x400fe1 <phase_2+57>
0x0000000000400fdc <phase_2+52>:	callq  0x40131b <explode_bomb>
0x0000000000400fe1 <phase_2+57>:	add    $0x4,%rbx
0x0000000000400fe5 <phase_2+61>:	cmp    %rbp,%rbx
0x0000000000400fe8 <phase_2+64>:	jne    0x400fd2 <phase_2+42>
0x0000000000400fea <phase_2+66>:	add    $0x28,%rsp
0x0000000000400fee <phase_2+70>:	pop    %rbx
0x0000000000400fef <phase_2+71>:	pop    %rbp
0x0000000000400ff0 <phase_2+72>:	retq   
End of assembler dump.
(gdb) disas read_six_numbers
Dump of assembler code for function read_six_numbers:
0x000000000040133d <read_six_numbers+0>:	sub    $0x18,%rsp
0x0000000000401341 <read_six_numbers+4>:	lea    0x4(%rsi),%rcx
0x0000000000401345 <read_six_numbers+8>:	lea    0x14(%rsi),%rax
0x0000000000401349 <read_six_numbers+12>:	mov    %rax,0x8(%rsp)
0x000000000040134e <read_six_numbers+17>:	lea    0x10(%rsi),%rax
0x0000000000401352 <read_six_numbers+21>:	mov    %rax,(%rsp)
0x0000000000401356 <read_six_numbers+25>:	lea    0xc(%rsi),%r9
0x000000000040135a <read_six_numbers+29>:	lea    0x8(%rsi),%r8
0x000000000040135e <read_six_numbers+33>:	mov    %rsi,%rdx
0x0000000000401361 <read_six_numbers+36>:	mov    $0x4024e0,%esi
0x0000000000401366 <read_six_numbers+41>:	mov    $0x0,%eax
0x000000000040136b <read_six_numbers+46>:	callq  0x400af0 <sscanf@plt>
0x0000000000401370 <read_six_numbers+51>:	cmp    $0x5,%eax
0x0000000000401373 <read_six_numbers+54>:	jg     0x40137a <read_six_numbers+61>
0x0000000000401375 <read_six_numbers+56>:	callq  0x40131b <explode_bomb>
0x000000000040137a <read_six_numbers+61>:	add    $0x18,%rsp
0x000000000040137e <read_six_numbers+65>:	xchg   %ax,%ax
0x0000000000401380 <read_six_numbers+67>:	retq   
End of assembler dump.
(gdb) b* 0x400fb6
Breakpoint 2 at 0x400fb6
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb 
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x2aaaaaaab000
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
He is evil and fits easily into most overhead storage bins.

Breakpoint 1, main (argc=<value optimized out>, argv=0x7fffffffea68) at bomb.c:77
77	    printf("Phase 1 defused. How about the next one?\n");
(gdb) c
Continuing.
Phase 1 defused. How about the next one?
0 1 2 3 4 5

Breakpoint 2, 0x0000000000400fb6 in phase_2 ()
(gdb) info reg
rax            0x6	6
rbx            0x7fffffffea68	140737488349800
rcx            0x5	5
rdx            0x7fffffffe928	140737488349480
rsi            0x35	53
rdi            0x5	5
rbp            0x0	0x0
rsp            0x7fffffffe940	0x7fffffffe940
r8             0xffffffff	4294967295
r9             0x0	0
r10            0x0	0
r11            0xa	10
r12            0x0	0
r13            0x7fffffffea60	140737488349792
r14            0x0	0
r15            0x0	0
rip            0x400fb6	0x400fb6 <phase_2+14>
eflags         0x202	[ IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
fctrl          0x37f	895
fstat          0x0	0
ftag           0xffff	65535
fiseg          0x0	0
---Type <return> to continue, or q <return> to quit---q
Quit
(gdb) x/x $rsp
0x7fffffffe940:	0x00000000
(gdb) x/x 0x4($rsp)

Program received signal SIGSEGV, Segmentation fault.
0x0000000000000004 in ?? ()
The program being debugged was signaled while in a function called from GDB.
GDB remains in the frame where the signal was received.
To change this behavior use "set unwindonsignal on".
Evaluation of the expression containing the function
(at 0x0x4) will be abandoned.
When the function is done executing, GDB will silently stop.
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb 
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
He is evil and fits easily into most overhead storage bins.

Breakpoint 1, main (argc=<value optimized out>, argv=0x7fffffffea68) at bomb.c:77
77	    printf("Phase 1 defused. How about the next one?\n");
(gdb) c'
Unmatched single quote.
(gdb) c
Continuing.
Phase 1 defused. How about the next one?
5 1 2 3 4 6

Breakpoint 2, 0x0000000000400fb6 in phase_2 ()
(gdb) info reg
rax            0x6	6
rbx            0x7fffffffea68	140737488349800
rcx            0x6	6
rdx            0x7fffffffe928	140737488349480
rsi            0x36	54
rdi            0x6	6
rbp            0x0	0x0
rsp            0x7fffffffe940	0x7fffffffe940
r8             0xffffffff	4294967295
r9             0x0	0
r10            0x0	0
r11            0xa	10
r12            0x0	0
r13            0x7fffffffea60	140737488349792
r14            0x0	0
r15            0x0	0
rip            0x400fb6	0x400fb6 <phase_2+14>
eflags         0x202	[ IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
fctrl          0x37f	895
fstat          0x0	0
ftag           0xffff	65535
fiseg          0x0	0
---Type <return> to continue, or q <return> to quit---q
Quit
(gdb) x/x $rsp
0x7fffffffe940:	0x00000005
(gdb) x/10x $rsp
0x7fffffffe940:	0x00000005	0x00000001	0x00000002	0x00000003
0x7fffffffe950:	0x00000004	0x00000006	0x004013f6	0x00000000
0x7fffffffe960:	0xffffea68	0x00007fff
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) r
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb 
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
He is evil and fits easily into most overhead storage bins.

Breakpoint 1, main (argc=<value optimized out>, argv=0x7fffffffea68) at bomb.c:77
77	    printf("Phase 1 defused. How about the next one?\n");
(gdb) c
Continuing.
Phase 1 defused. How about the next one?
0 1 2 3 4 5   

Breakpoint 2, 0x0000000000400fb6 in phase_2 ()
(gdb) disas phase_2
Dump of assembler code for function phase_2:
0x0000000000400fa8 <phase_2+0>:	push   %rbp
0x0000000000400fa9 <phase_2+1>:	push   %rbx
0x0000000000400faa <phase_2+2>:	sub    $0x28,%rsp
0x0000000000400fae <phase_2+6>:	mov    %rsp,%rsi
0x0000000000400fb1 <phase_2+9>:	callq  0x40133d <read_six_numbers>
0x0000000000400fb6 <phase_2+14>:	cmpl   $0x0,(%rsp)
0x0000000000400fba <phase_2+18>:	jne    0x400fc3 <phase_2+27>
0x0000000000400fbc <phase_2+20>:	cmpl   $0x1,0x4(%rsp)
0x0000000000400fc1 <phase_2+25>:	je     0x400fc8 <phase_2+32>
0x0000000000400fc3 <phase_2+27>:	callq  0x40131b <explode_bomb>
0x0000000000400fc8 <phase_2+32>:	lea    0x8(%rsp),%rbx
0x0000000000400fcd <phase_2+37>:	lea    0x18(%rsp),%rbp
0x0000000000400fd2 <phase_2+42>:	mov    -0x8(%rbx),%eax
0x0000000000400fd5 <phase_2+45>:	add    -0x4(%rbx),%eax
0x0000000000400fd8 <phase_2+48>:	cmp    %eax,(%rbx)
0x0000000000400fda <phase_2+50>:	je     0x400fe1 <phase_2+57>
0x0000000000400fdc <phase_2+52>:	callq  0x40131b <explode_bomb>
0x0000000000400fe1 <phase_2+57>:	add    $0x4,%rbx
0x0000000000400fe5 <phase_2+61>:	cmp    %rbp,%rbx
0x0000000000400fe8 <phase_2+64>:	jne    0x400fd2 <phase_2+42>
0x0000000000400fea <phase_2+66>:	add    $0x28,%rsp
0x0000000000400fee <phase_2+70>:	pop    %rbx
0x0000000000400fef <phase_2+71>:	pop    %rbp
0x0000000000400ff0 <phase_2+72>:	retq   
End of assembler dump.
(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb 
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
He is evil and fits easily into most overhead storage bins.

Breakpoint 1, main (argc=<value optimized out>, argv=0x7fffffffea68) at bomb.c:77
77	    printf("Phase 1 defused. How about the next one?\n");
(gdb) c
Continuing.
Phase 1 defused. How about the next one?
0 1 1 2 3 5

Breakpoint 2, 0x0000000000400fb6 in phase_2 ()
(gdb) c
Continuing.
That's number 2.  Keep going!
kill

BOOM!!!
The bomb has blown up.

Program exited with code 010.
(gdb) p explode_bomb 
$1 = {<text variable, no debug info>} 0x40131b <explode_bomb>
(gdb) b* explode_bomb 
Breakpoint 3 at 0x40131b
(gdb) info main
Undefined info command: "main".  Try "help info".
(gdb) i main
Undefined info command: "main".  Try "help info".
(gdb) p main
$2 = {int (int, char **)} 0x400c98 <main>
(gdb) disas phase_3
Dump of assembler code for function phase_3:
0x00000000004010ca <phase_3+0>:	sub    $0x18,%rsp
0x00000000004010ce <phase_3+4>:	lea    0xf(%rsp),%rcx
0x00000000004010d3 <phase_3+9>:	lea    0x14(%rsp),%rdx
0x00000000004010d8 <phase_3+14>:	lea    0x10(%rsp),%r8
0x00000000004010dd <phase_3+19>:	mov    $0x40244b,%esi
0x00000000004010e2 <phase_3+24>:	mov    $0x0,%eax
0x00000000004010e7 <phase_3+29>:	callq  0x400af0 <sscanf@plt>
0x00000000004010ec <phase_3+34>:	cmp    $0x2,%eax
0x00000000004010ef <phase_3+37>:	jg     0x4010f6 <phase_3+44>
0x00000000004010f1 <phase_3+39>:	callq  0x40131b <explode_bomb>
0x00000000004010f6 <phase_3+44>:	cmpl   $0x7,0x14(%rsp)
0x00000000004010fb <phase_3+49>:	ja     0x4011fa <phase_3+304>
0x0000000000401101 <phase_3+55>:	mov    0x14(%rsp),%eax
0x0000000000401105 <phase_3+59>:	jmpq   *0x402460(,%rax,8)
0x000000000040110c <phase_3+66>:	mov    $0x63,%eax
0x0000000000401111 <phase_3+71>:	cmpl   $0x3b3,0x10(%rsp)
0x0000000000401119 <phase_3+79>:	je     0x40120a <phase_3+320>
0x000000000040111f <phase_3+85>:	callq  0x40131b <explode_bomb>
0x0000000000401124 <phase_3+90>:	mov    $0x63,%eax
0x0000000000401129 <phase_3+95>:	jmpq   0x40120a <phase_3+320>
0x000000000040112e <phase_3+100>:	mov    $0x71,%eax
0x0000000000401133 <phase_3+105>:	cmpl   $0x309,0x10(%rsp)
0x000000000040113b <phase_3+113>:	je     0x40120a <phase_3+320>
0x0000000000401141 <phase_3+119>:	callq  0x40131b <explode_bomb>
0x0000000000401146 <phase_3+124>:	mov    $0x71,%eax
0x000000000040114b <phase_3+129>:	jmpq   0x40120a <phase_3+320>
0x0000000000401150 <phase_3+134>:	mov    $0x69,%eax
---Type <return> to continue, or q <return> to quit---
0x0000000000401155 <phase_3+139>:	cmpl   $0x387,0x10(%rsp)
0x000000000040115d <phase_3+147>:	je     0x40120a <phase_3+320>
0x0000000000401163 <phase_3+153>:	callq  0x40131b <explode_bomb>
0x0000000000401168 <phase_3+158>:	mov    $0x69,%eax
0x000000000040116d <phase_3+163>:	jmpq   0x40120a <phase_3+320>
0x0000000000401172 <phase_3+168>:	mov    $0x62,%eax
0x0000000000401177 <phase_3+173>:	cmpl   $0x3b,0x10(%rsp)
0x000000000040117c <phase_3+178>:	je     0x40120a <phase_3+320>
0x0000000000401182 <phase_3+184>:	callq  0x40131b <explode_bomb>
0x0000000000401187 <phase_3+189>:	mov    $0x62,%eax
0x000000000040118c <phase_3+194>:	jmp    0x40120a <phase_3+320>
0x000000000040118e <phase_3+196>:	mov    $0x79,%eax
0x0000000000401193 <phase_3+201>:	cmpl   $0x27e,0x10(%rsp)
0x000000000040119b <phase_3+209>:	je     0x40120a <phase_3+320>
0x000000000040119d <phase_3+211>:	callq  0x40131b <explode_bomb>
0x00000000004011a2 <phase_3+216>:	mov    $0x79,%eax
0x00000000004011a7 <phase_3+221>:	jmp    0x40120a <phase_3+320>
0x00000000004011a9 <phase_3+223>:	mov    $0x76,%eax
0x00000000004011ae <phase_3+228>:	cmpl   $0x38c,0x10(%rsp)
0x00000000004011b6 <phase_3+236>:	je     0x40120a <phase_3+320>
0x00000000004011b8 <phase_3+238>:	callq  0x40131b <explode_bomb>
0x00000000004011bd <phase_3+243>:	mov    $0x76,%eax
0x00000000004011c2 <phase_3+248>:	jmp    0x40120a <phase_3+320>
0x00000000004011c4 <phase_3+250>:	mov    $0x74,%eax
0x00000000004011c9 <phase_3+255>:	cmpl   $0x1df,0x10(%rsp)
0x00000000004011d1 <phase_3+263>:	je     0x40120a <phase_3+320>
0x00000000004011d3 <phase_3+265>:	callq  0x40131b <explode_bomb>
0x00000000004011d8 <phase_3+270>:	mov    $0x74,%eax
---Type <return> to continue, or q <return> to quit---
0x00000000004011dd <phase_3+275>:	jmp    0x40120a <phase_3+320>
0x00000000004011df <phase_3+277>:	mov    $0x73,%eax
0x00000000004011e4 <phase_3+282>:	cmpl   $0x2a9,0x10(%rsp)
0x00000000004011ec <phase_3+290>:	je     0x40120a <phase_3+320>
0x00000000004011ee <phase_3+292>:	callq  0x40131b <explode_bomb>
0x00000000004011f3 <phase_3+297>:	mov    $0x73,%eax
0x00000000004011f8 <phase_3+302>:	jmp    0x40120a <phase_3+320>
0x00000000004011fa <phase_3+304>:	nopw   0x0(%rax,%rax,1)
0x0000000000401200 <phase_3+310>:	callq  0x40131b <explode_bomb>
0x0000000000401205 <phase_3+315>:	mov    $0x65,%eax
0x000000000040120a <phase_3+320>:	cmp    0xf(%rsp),%al
0x000000000040120e <phase_3+324>:	je     0x401215 <phase_3+331>
0x0000000000401210 <phase_3+326>:	callq  0x40131b <explode_bomb>
0x0000000000401215 <phase_3+331>:	add    $0x18,%rsp
0x0000000000401219 <phase_3+335>:	retq   
End of assembler dump.
(gdb) x/s 0x40244b
0x40244b <__dso_handle+451>:	 "%d %c %d"
(gdb) x/x 0x402460
0x402460 <__dso_handle+472>:	0x0040110c
(gdb) x/10x 0x402460
0x402460 <__dso_handle+472>:	0x0040110c	0x00000000	0x0040112e	0x00000000
0x402470 <__dso_handle+488>:	0x00401150	0x00000000	0x00401172	0x00000000
0x402480 <__dso_handle+504>:	0x0040118e	0x00000000
(gdb) x/30x 0x402460
0x402460 <__dso_handle+472>:	0x0040110c	0x00000000	0x0040112e	0x00000000
0x402470 <__dso_handle+488>:	0x00401150	0x00000000	0x00401172	0x00000000
0x402480 <__dso_handle+504>:	0x0040118e	0x00000000	0x004011a9	0x00000000
0x402490 <__dso_handle+520>:	0x004011c4	0x00000000	0x004011df	0x00000000
0x4024a0 <array.3310>:	0x7564616d	0x73726569	0x746f666e	0x6c796276
0x4024b0:	0x25206425	0x73252064	0x45724400	0x006c6976
0x4024c0:	0x4f4f420a	0x2121214d	0x65685400	0x6d6f6220
0x4024d0:	0x61682062	0x6c622073
(gdb) r
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb 
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x2aaaaaaab000
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
He is evil and fits easily into most overhead storage bins.

Breakpoint 1, main (argc=<value optimized out>, argv=0x7fffffffea68) at bomb.c:77
77	    printf("Phase 1 defused. How about the next one?\n");
(gdb) c
Continuing.
Phase 1 defused. How about the next one?
0 1 1 2 3 5

Breakpoint 2, 0x0000000000400fb6 in phase_2 ()
(gdb) c
Continuing.
That's number 2.  Keep going!
3 b 59  
Halfway there!

Program received signal SIGINT, Interrupt.
0x00000032ccac71c0 in __read_nocancel () from /lib64/libc.so.6
(gdb) quit
A debugging session is active.

	Inferior 6 [process 5000] will be killed.

Quit anyway? (y or n) y
[eric9709@programming bomb60]$ ./bomb 
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
He is evil and fits easily into most overhead storage bins.
Phase 1 defused. How about the next one?
0 1 1 2 3 5
That's number 2.  Keep going!
3 b 59
Halfway there!
So you think you can stop the bomb with ctrl-c, do you?
Well...OK. :-)
[eric9709@programming bomb60]$ ./bomb 
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
So you think you can stop the bomb with ctrl-c, do you?
Well...OK. :-)
[eric9709@programming bomb60]$ 



Host 'programming.postech.ac.kr' resolved to 141.223.2.22.
Connecting to 141.223.2.22:2022...
Connection established.
To escape to local shell, press 'Ctrl+Alt+]'.

Last login: Fri Sep 21 15:50:52 2018 from 119.202.93.168
=========================================
      Welcome to programming server
  Inquiry: 279-2520, hemos@postech.ac.kr
=========================================
[eric9709@programming ~]$ cd CSED211
[eric9709@programming CSED211]$ cd Lab3
[eric9709@programming Lab3]$ ls
bomb60  bomb60.tar  practice_gdb
[eric9709@programming Lab3]$ cd bomb60
[eric9709@programming bomb60]$ gdb bomb
GNU gdb (GDB) CentOS (7.0.1-45.el5.centos)
Copyright (C) 2009 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/std/eric9709/CSED211/Lab3/bomb60/bomb...done.
(gdb) disas main
Dump of assembler code for function main:
0x0000000000400c98 <main+0>:	push   %rbx
0x0000000000400c99 <main+1>:	mov    %rsi,%rbx
0x0000000000400c9c <main+4>:	cmp    $0x1,%edi
0x0000000000400c9f <main+7>:	jne    0x400cb1 <main+25>
0x0000000000400ca1 <main+9>:	mov    0x202c78(%rip),%rax        # 0x603920 <stdin@@GLIBC_2.2.5>
0x0000000000400ca8 <main+16>:	mov    %rax,0x202c99(%rip)        # 0x603948 <infile>
0x0000000000400caf <main+23>:	jmp    0x400d07 <main+111>
0x0000000000400cb1 <main+25>:	cmp    $0x2,%edi
0x0000000000400cb4 <main+28>:	jne    0x400ceb <main+83>
0x0000000000400cb6 <main+30>:	mov    $0x402290,%esi
0x0000000000400cbb <main+35>:	mov    0x8(%rbx),%rdi
0x0000000000400cbf <main+39>:	callq  0x400a80 <fopen@plt>
0x0000000000400cc4 <main+44>:	mov    %rax,0x202c7d(%rip)        # 0x603948 <infile>
0x0000000000400ccb <main+51>:	test   %rax,%rax
0x0000000000400cce <main+54>:	jne    0x400d07 <main+111>
0x0000000000400cd0 <main+56>:	mov    0x8(%rbx),%rdx
0x0000000000400cd4 <main+60>:	mov    (%rbx),%rsi
0x0000000000400cd7 <main+63>:	mov    $0x402292,%edi
0x0000000000400cdc <main+68>:	callq  0x400a10 <printf@plt>
0x0000000000400ce1 <main+73>:	mov    $0x8,%edi
0x0000000000400ce6 <main+78>:	callq  0x400a60 <exit@plt>
0x0000000000400ceb <main+83>:	mov    (%rsi),%rsi
0x0000000000400cee <main+86>:	mov    $0x4022af,%edi
0x0000000000400cf3 <main+91>:	mov    $0x0,%eax
0x0000000000400cf8 <main+96>:	callq  0x400a10 <printf@plt>
0x0000000000400cfd <main+101>:	mov    $0x8,%edi
0x0000000000400d02 <main+106>:	callq  0x400a60 <exit@plt>
---Type <return> to continue, or q <return> to quit---
0x0000000000400d07 <main+111>:	callq  0x401529 <initialize_bomb>
0x0000000000400d0c <main+116>:	mov    $0x402318,%edi
0x0000000000400d11 <main+121>:	callq  0x400a50 <puts@plt>
0x0000000000400d16 <main+126>:	mov    $0x402358,%edi
0x0000000000400d1b <main+131>:	callq  0x400a50 <puts@plt>
0x0000000000400d20 <main+136>:	callq  0x4013ff <read_line>
0x0000000000400d25 <main+141>:	mov    %rax,%rdi
0x0000000000400d28 <main+144>:	callq  0x40104d <phase_1>
0x0000000000400d2d <main+149>:	callq  0x4012a3 <phase_defused>
0x0000000000400d32 <main+154>:	mov    $0x402388,%edi
0x0000000000400d37 <main+159>:	callq  0x400a50 <puts@plt>
0x0000000000400d3c <main+164>:	callq  0x4013ff <read_line>
0x0000000000400d41 <main+169>:	mov    %rax,%rdi
0x0000000000400d44 <main+172>:	callq  0x400fa8 <phase_2>
0x0000000000400d49 <main+177>:	callq  0x4012a3 <phase_defused>
0x0000000000400d4e <main+182>:	mov    $0x4022c9,%edi
0x0000000000400d53 <main+187>:	callq  0x400a50 <puts@plt>
0x0000000000400d58 <main+192>:	callq  0x4013ff <read_line>
0x0000000000400d5d <main+197>:	mov    %rax,%rdi
0x0000000000400d60 <main+200>:	callq  0x4010ca <phase_3>
0x0000000000400d65 <main+205>:	callq  0x4012a3 <phase_defused>
0x0000000000400d6a <main+210>:	mov    $0x4022e7,%edi
0x0000000000400d6f <main+215>:	callq  0x400a50 <puts@plt>
0x0000000000400d74 <main+220>:	callq  0x4013ff <read_line>
0x0000000000400d79 <main+225>:	mov    %rax,%rdi
0x0000000000400d7c <main+228>:	callq  0x401069 <phase_4>
0x0000000000400d81 <main+233>:	callq  0x4012a3 <phase_defused>
0x0000000000400d86 <main+238>:	mov    $0x4023b8,%edi
---Type <return> to continue, or q <return> to quit---
0x0000000000400d8b <main+243>:	callq  0x400a50 <puts@plt>
0x0000000000400d90 <main+248>:	callq  0x4013ff <read_line>
0x0000000000400d95 <main+253>:	mov    %rax,%rdi
0x0000000000400d98 <main+256>:	callq  0x400ff1 <phase_5>
0x0000000000400d9d <main+261>:	callq  0x4012a3 <phase_defused>
0x0000000000400da2 <main+266>:	mov    $0x4022f6,%edi
0x0000000000400da7 <main+271>:	callq  0x400a50 <puts@plt>
0x0000000000400dac <main+276>:	callq  0x4013ff <read_line>
0x0000000000400db1 <main+281>:	mov    %rax,%rdi
0x0000000000400db4 <main+284>:	callq  0x400e93 <phase_6>
0x0000000000400db9 <main+289>:	callq  0x4012a3 <phase_defused>
0x0000000000400dbe <main+294>:	mov    $0x0,%eax
0x0000000000400dc3 <main+299>:	pop    %rbx
0x0000000000400dc4 <main+300>:	retq   
End of assembler dump.
(gdb) disas phase_4
Dump of assembler code for function phase_4:
0x0000000000401069 <phase_4+0>:	sub    $0x18,%rsp
0x000000000040106d <phase_4+4>:	lea    0x10(%rsp),%rcx
0x0000000000401072 <phase_4+9>:	lea    0x14(%rsp),%rdx
0x0000000000401077 <phase_4+14>:	mov    $0x4024ec,%esi
0x000000000040107c <phase_4+19>:	mov    $0x0,%eax
0x0000000000401081 <phase_4+24>:	callq  0x400af0 <sscanf@plt>
0x0000000000401086 <phase_4+29>:	cmp    $0x2,%eax
0x0000000000401089 <phase_4+32>:	jne    0x401098 <phase_4+47>
0x000000000040108b <phase_4+34>:	mov    0x14(%rsp),%eax
0x000000000040108f <phase_4+38>:	test   %eax,%eax
0x0000000000401091 <phase_4+40>:	js     0x401098 <phase_4+47>
0x0000000000401093 <phase_4+42>:	cmp    $0xe,%eax
0x0000000000401096 <phase_4+45>:	jle    0x40109d <phase_4+52>
0x0000000000401098 <phase_4+47>:	callq  0x40131b <explode_bomb>
0x000000000040109d <phase_4+52>:	mov    0x14(%rsp),%edi
0x00000000004010a1 <phase_4+56>:	mov    $0xe,%edx
0x00000000004010a6 <phase_4+61>:	mov    $0x0,%esi
0x00000000004010ab <phase_4+66>:	callq  0x400dd0 <func4>
0x00000000004010b0 <phase_4+71>:	cmp    $0x3,%eax
0x00000000004010b3 <phase_4+74>:	jne    0x4010bc <phase_4+83>
0x00000000004010b5 <phase_4+76>:	cmpl   $0x3,0x10(%rsp)
0x00000000004010ba <phase_4+81>:	je     0x4010c5 <phase_4+92>
0x00000000004010bc <phase_4+83>:	nopl   0x0(%rax)
0x00000000004010c0 <phase_4+87>:	callq  0x40131b <explode_bomb>
0x00000000004010c5 <phase_4+92>:	add    $0x18,%rsp
0x00000000004010c9 <phase_4+96>:	retq   
End of assembler dump.
(gdb) disas phase_3
Dump of assembler code for function phase_3:
0x00000000004010ca <phase_3+0>:	sub    $0x18,%rsp
0x00000000004010ce <phase_3+4>:	lea    0xf(%rsp),%rcx
0x00000000004010d3 <phase_3+9>:	lea    0x14(%rsp),%rdx
0x00000000004010d8 <phase_3+14>:	lea    0x10(%rsp),%r8
0x00000000004010dd <phase_3+19>:	mov    $0x40244b,%esi
0x00000000004010e2 <phase_3+24>:	mov    $0x0,%eax
0x00000000004010e7 <phase_3+29>:	callq  0x400af0 <sscanf@plt>
0x00000000004010ec <phase_3+34>:	cmp    $0x2,%eax
0x00000000004010ef <phase_3+37>:	jg     0x4010f6 <phase_3+44>
0x00000000004010f1 <phase_3+39>:	callq  0x40131b <explode_bomb>
0x00000000004010f6 <phase_3+44>:	cmpl   $0x7,0x14(%rsp)
0x00000000004010fb <phase_3+49>:	ja     0x4011fa <phase_3+304>
0x0000000000401101 <phase_3+55>:	mov    0x14(%rsp),%eax
0x0000000000401105 <phase_3+59>:	jmpq   *0x402460(,%rax,8)
0x000000000040110c <phase_3+66>:	mov    $0x63,%eax
0x0000000000401111 <phase_3+71>:	cmpl   $0x3b3,0x10(%rsp)
0x0000000000401119 <phase_3+79>:	je     0x40120a <phase_3+320>
0x000000000040111f <phase_3+85>:	callq  0x40131b <explode_bomb>
0x0000000000401124 <phase_3+90>:	mov    $0x63,%eax
0x0000000000401129 <phase_3+95>:	jmpq   0x40120a <phase_3+320>
0x000000000040112e <phase_3+100>:	mov    $0x71,%eax
0x0000000000401133 <phase_3+105>:	cmpl   $0x309,0x10(%rsp)
0x000000000040113b <phase_3+113>:	je     0x40120a <phase_3+320>
0x0000000000401141 <phase_3+119>:	callq  0x40131b <explode_bomb>
0x0000000000401146 <phase_3+124>:	mov    $0x71,%eax
0x000000000040114b <phase_3+129>:	jmpq   0x40120a <phase_3+320>
0x0000000000401150 <phase_3+134>:	mov    $0x69,%eax
---Type <return> to continue, or q <return> to quit---q
Quit
(gdb) disas phase_4
Dump of assembler code for function phase_4:
0x0000000000401069 <phase_4+0>:	sub    $0x18,%rsp
0x000000000040106d <phase_4+4>:	lea    0x10(%rsp),%rcx
0x0000000000401072 <phase_4+9>:	lea    0x14(%rsp),%rdx
0x0000000000401077 <phase_4+14>:	mov    $0x4024ec,%esi
0x000000000040107c <phase_4+19>:	mov    $0x0,%eax
0x0000000000401081 <phase_4+24>:	callq  0x400af0 <sscanf@plt>
0x0000000000401086 <phase_4+29>:	cmp    $0x2,%eax
0x0000000000401089 <phase_4+32>:	jne    0x401098 <phase_4+47>
0x000000000040108b <phase_4+34>:	mov    0x14(%rsp),%eax
0x000000000040108f <phase_4+38>:	test   %eax,%eax
0x0000000000401091 <phase_4+40>:	js     0x401098 <phase_4+47>
0x0000000000401093 <phase_4+42>:	cmp    $0xe,%eax
0x0000000000401096 <phase_4+45>:	jle    0x40109d <phase_4+52>
0x0000000000401098 <phase_4+47>:	callq  0x40131b <explode_bomb>
0x000000000040109d <phase_4+52>:	mov    0x14(%rsp),%edi
0x00000000004010a1 <phase_4+56>:	mov    $0xe,%edx
0x00000000004010a6 <phase_4+61>:	mov    $0x0,%esi
0x00000000004010ab <phase_4+66>:	callq  0x400dd0 <func4>
0x00000000004010b0 <phase_4+71>:	cmp    $0x3,%eax
0x00000000004010b3 <phase_4+74>:	jne    0x4010bc <phase_4+83>
0x00000000004010b5 <phase_4+76>:	cmpl   $0x3,0x10(%rsp)
0x00000000004010ba <phase_4+81>:	je     0x4010c5 <phase_4+92>
0x00000000004010bc <phase_4+83>:	nopl   0x0(%rax)
0x00000000004010c0 <phase_4+87>:	callq  0x40131b <explode_bomb>
0x00000000004010c5 <phase_4+92>:	add    $0x18,%rsp
0x00000000004010c9 <phase_4+96>:	retq   
End of assembler dump.
(gdb) x/s 0x4024ec
0x4024ec:	 "%d %d"
(gdb) disas func4
Dump of assembler code for function func4:
0x0000000000400dd0 <func4+0>:	mov    %edx,%ecx
0x0000000000400dd2 <func4+2>:	sub    %esi,%edx
0x0000000000400dd4 <func4+4>:	mov    %edx,%eax
0x0000000000400dd6 <func4+6>:	shr    $0x1f,%eax
0x0000000000400dd9 <func4+9>:	add    %edx,%eax
0x0000000000400ddb <func4+11>:	sar    %eax
0x0000000000400ddd <func4+13>:	add    %esi,%eax
0x0000000000400ddf <func4+15>:	cmp    %edi,%eax
0x0000000000400de1 <func4+17>:	jle    0x400df0 <func4+32>
0x0000000000400de3 <func4+19>:	lea    -0x1(%rax),%edx
0x0000000000400de6 <func4+22>:	callq  0x400dd0 <func4>
0x0000000000400deb <func4+27>:	lea    (%rax,%rax,1),%edx
0x0000000000400dee <func4+30>:	jmp    0x400e07 <func4+55>
0x0000000000400df0 <func4+32>:	mov    $0x0,%edx
0x0000000000400df5 <func4+37>:	cmp    %edi,%eax
0x0000000000400df7 <func4+39>:	jge    0x400e07 <func4+55>
0x0000000000400df9 <func4+41>:	lea    0x1(%rax),%esi
0x0000000000400dfc <func4+44>:	mov    %ecx,%edx
0x0000000000400dfe <func4+46>:	callq  0x400dd0 <func4>
0x0000000000400e03 <func4+51>:	lea    0x1(%rax,%rax,1),%edx
0x0000000000400e07 <func4+55>:	mov    %edx,%eax
0x0000000000400e09 <func4+57>:	retq   
End of assembler dump.
(gdb) r
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb 
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x2aaaaaaab000
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
He is evil and fits easily into most overhead storage bins.
Phase 1 defused. How about the next one?
0 1 1 2 3 5
That's number 2.  Keep going!
3 b 59
Halfway there!
6 3

BOOM!!!
The bomb has blown up.

Program exited with code 010.
(gdb) b* ex
exec_comm                    execve                       expand_dynamic_string_token  expected4.7013               ext_wmatch
execl                        execvp                       expected.9491                expected_note.8517           extend_buffers
execle                       exit                         expected1.7010               expected_note.9497           
execlp                       exit@plt                     expected2.7011               explode_bomb                 
execv                        expand_bkref_cache           expected3.7012               ext_match                    
(gdb) b* explode_bomb 
Breakpoint 1 at 0x40131b
(gdb) r
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb 
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x2aaaaaaab000
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
    
Program received signal SIGINT, Interrupt.
0x00000032ccac71c0 in __read_nocancel () from /lib64/libc.so.6
(gdb) ls
Undefined command: "ls".  Try "help".
(gdb) q
A debugging session is active.

	Inferior 2 [process 11461] will be killed.

Quit anyway? (y or n) l^Hn
Please answer y or n.
A debugging session is active.

	Inferior 2 [process 11461] will be killed.

Quit anyway? (y or n) n
Not confirmed.
(gdb) r solution.txt
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb solution.txt
/home/std/eric9709/CSED211/Lab3/bomb60/bomb: Error: Couldn't open solution.txt

Program exited with code 010.
(gdb) r solution.txt
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb solution.txt
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x2aaaaaaab000
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!

Breakpoint 1, 0x000000000040131b in explode_bomb ()
(gdb) info b
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x000000000040131b <explode_bomb>
	breakpoint already hit 1 time
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) r
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb solution.txt
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x2aaaaaaab000
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!

Breakpoint 1, 0x000000000040131b in explode_bomb ()
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) quit
[eric9709@programming bomb60]$ gdb bomb
GNU gdb (GDB) CentOS (7.0.1-45.el5.centos)
Copyright (C) 2009 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/std/eric9709/CSED211/Lab3/bomb60/bomb...done.
(gdb) r
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb 
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x2aaaaaaab000
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
He is evil and fits easily into most overhead storage bins.
0 1 1 2 3 5
3 b 59Phase 1 defused. How about the next one?
That's number 2.  Keep going!
0 1 1 2 3 5

BOOM!!!
The bomb has blown up.

Program exited with code 010.
(gdb) r
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb 
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x2aaaaaaab000
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
He is evil and fits easily into most overhead storage bins.
0 1 1 2 3 5
3 b 59Phase 1 defused. How about the next one?
That's number 2.  Keep going!

Halfway there!
1 3

BOOM!!!
The bomb has blown up.

Program exited with code 010.
(gdb) r
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb 
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x2aaaaaaab000
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
He is evil and fits easily into most overhead storage bins.
0 1 1 2 3 5
3 b 59Phase 1 defused. How about the next one?
That's number 2.  Keep going!

Halfway there!
2 3

BOOM!!!
The bomb has blown up.

Program exited with code 010.
(gdb) r
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb 
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x2aaaaaaab000
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
He is evil and fits easily into most overhead storage bins.
0 1 1 2 3 5
3 b 59Phase 1 defused. How about the next one?
That's number 2.  Keep going!

Halfway there!
3 3

BOOM!!!
The bomb has blown up.

Program exited with code 010.
(gdb) r
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb 
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x2aaaaaaab000
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
He is evil and fits easily into most overhead storage bins.
0 1 1 2 3 5
3 b 59Phase 1 defused. How about the next one?
That's number 2.  Keep going!

Halfway there!
4 3

BOOM!!!
The bomb has blown up.

Program exited with code 010.
(gdb) r
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb 
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x2aaaaaaab000
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
He is evil and fits easily into most overhead storage bins.
0 1 1 2 3 5
3 b 59Phase 1 defused. How about the next one?
That's number 2.  Keep going!
5 3

BOOM!!!
The bomb has blown up.

Program exited with code 010.
(gdb) r
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb 
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x2aaaaaaab000
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
He is evil and fits easily into most overhead storage bins.
0 1 1 2 3 5
3 b 59Phase 1 defused. How about the next one?
That's number 2.  Keep going!

Halfway there!
5 3

BOOM!!!
The bomb has blown up.

Program exited with code 010.
(gdb) r
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb 
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x2aaaaaaab000
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
He is evil and fits easily into most overhead storage bins.
0 1 1 2 3 5
3 b 59
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!

7 3

BOOM!!!
The bomb has blown up.

Program exited with code 010.
(gdb) r
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb 
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x2aaaaaaab000
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
He is evil and fits easily into most overhead storage bins.
0 1 1 2 3 5
3 b 59
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
8 3

BOOM!!!
The bomb has blown up.

Program exited with code 010.
(gdb) r
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb 
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x2aaaaaaab000
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
He is evil and fits easily into most overhead storage bins.
0 1 1 2 3 5
3 b 59
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
9 3

BOOM!!!
The bomb has blown up.

Program exited with code 010.
(gdb) r
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb 
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x2aaaaaaab000
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
He is evil and fits easily into most overhead storage bins.
0 1 1 2 3 5
3 b 59
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
10 3

BOOM!!!
The bomb has blown up.

Program exited with code 010.
(gdb) He is evil and fits easily into most overhead storage bins.
Undefined command: "is".  Try "help".
(gdb) 0 1 1 2 3 5
Undefined command: "0".  Try "help".
(gdb) 3 b 59
Undefined command: "3".  Try "help".
(gdb) r
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb 
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x2aaaaaaab000
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
He is evil and fits easily into most overhead storage bins.
0 1 1 2 3 5
3 b 59
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
11 3

BOOM!!!
The bomb has blown up.

Program exited with code 010.
(gdb) r
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb 
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x2aaaaaaab000
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
He is evil and fits easily into most overhead storage bins.
0 1 1 2 3 5
3 b 59
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
12 3
So you got that one.  Try this one.
            
Program received signal SIGINT, Interrupt.
0x00000032ccac71c0 in __read_nocancel () from /lib64/libc.so.6
(gdb) r solution.txt
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb solution.txt
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x2aaaaaaab000
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!

BOOM!!!
The bomb has blown up.

Program exited with code 010.
(gdb) disas main
Dump of assembler code for function main:
0x0000000000400c98 <main+0>:	push   %rbx
0x0000000000400c99 <main+1>:	mov    %rsi,%rbx
0x0000000000400c9c <main+4>:	cmp    $0x1,%edi
0x0000000000400c9f <main+7>:	jne    0x400cb1 <main+25>
0x0000000000400ca1 <main+9>:	mov    0x202c78(%rip),%rax        # 0x603920 <stdin@@GLIBC_2.2.5>
0x0000000000400ca8 <main+16>:	mov    %rax,0x202c99(%rip)        # 0x603948 <infile>
0x0000000000400caf <main+23>:	jmp    0x400d07 <main+111>
0x0000000000400cb1 <main+25>:	cmp    $0x2,%edi
0x0000000000400cb4 <main+28>:	jne    0x400ceb <main+83>
0x0000000000400cb6 <main+30>:	mov    $0x402290,%esi
0x0000000000400cbb <main+35>:	mov    0x8(%rbx),%rdi
0x0000000000400cbf <main+39>:	callq  0x400a80 <fopen@plt>
0x0000000000400cc4 <main+44>:	mov    %rax,0x202c7d(%rip)        # 0x603948 <infile>
0x0000000000400ccb <main+51>:	test   %rax,%rax
0x0000000000400cce <main+54>:	jne    0x400d07 <main+111>
0x0000000000400cd0 <main+56>:	mov    0x8(%rbx),%rdx
0x0000000000400cd4 <main+60>:	mov    (%rbx),%rsi
0x0000000000400cd7 <main+63>:	mov    $0x402292,%edi
0x0000000000400cdc <main+68>:	callq  0x400a10 <printf@plt>
0x0000000000400ce1 <main+73>:	mov    $0x8,%edi
0x0000000000400ce6 <main+78>:	callq  0x400a60 <exit@plt>
0x0000000000400ceb <main+83>:	mov    (%rsi),%rsi
0x0000000000400cee <main+86>:	mov    $0x4022af,%edi
0x0000000000400cf3 <main+91>:	mov    $0x0,%eax
0x0000000000400cf8 <main+96>:	callq  0x400a10 <printf@plt>
0x0000000000400cfd <main+101>:	mov    $0x8,%edi
0x0000000000400d02 <main+106>:	callq  0x400a60 <exit@plt>
---Type <return> to continue, or q <return> to quit---
0x0000000000400d07 <main+111>:	callq  0x401529 <initialize_bomb>
0x0000000000400d0c <main+116>:	mov    $0x402318,%edi
0x0000000000400d11 <main+121>:	callq  0x400a50 <puts@plt>
0x0000000000400d16 <main+126>:	mov    $0x402358,%edi
0x0000000000400d1b <main+131>:	callq  0x400a50 <puts@plt>
0x0000000000400d20 <main+136>:	callq  0x4013ff <read_line>
0x0000000000400d25 <main+141>:	mov    %rax,%rdi
0x0000000000400d28 <main+144>:	callq  0x40104d <phase_1>
0x0000000000400d2d <main+149>:	callq  0x4012a3 <phase_defused>
0x0000000000400d32 <main+154>:	mov    $0x402388,%edi
0x0000000000400d37 <main+159>:	callq  0x400a50 <puts@plt>
0x0000000000400d3c <main+164>:	callq  0x4013ff <read_line>
0x0000000000400d41 <main+169>:	mov    %rax,%rdi
0x0000000000400d44 <main+172>:	callq  0x400fa8 <phase_2>
0x0000000000400d49 <main+177>:	callq  0x4012a3 <phase_defused>
0x0000000000400d4e <main+182>:	mov    $0x4022c9,%edi
0x0000000000400d53 <main+187>:	callq  0x400a50 <puts@plt>
0x0000000000400d58 <main+192>:	callq  0x4013ff <read_line>
0x0000000000400d5d <main+197>:	mov    %rax,%rdi
0x0000000000400d60 <main+200>:	callq  0x4010ca <phase_3>
0x0000000000400d65 <main+205>:	callq  0x4012a3 <phase_defused>
0x0000000000400d6a <main+210>:	mov    $0x4022e7,%edi
0x0000000000400d6f <main+215>:	callq  0x400a50 <puts@plt>
0x0000000000400d74 <main+220>:	callq  0x4013ff <read_line>
0x0000000000400d79 <main+225>:	mov    %rax,%rdi
0x0000000000400d7c <main+228>:	callq  0x401069 <phase_4>
0x0000000000400d81 <main+233>:	callq  0x4012a3 <phase_defused>
0x0000000000400d86 <main+238>:	mov    $0x4023b8,%edi
---Type <return> to continue, or q <return> to quit---q
Quit
(gdb) b* phase_1
Breakpoint 1 at 0x40104d
(gdb) r
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb solution.txt
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x2aaaaaaab000
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!

Breakpoint 1, 0x000000000040104d in phase_1 ()
(gdb) x/x $rdi
0x603960 <input_strings>:	0x69206548
(gdb) x/s $rdi
0x603960 <input_strings>:	 "He is evil and fits easily into most overhead storage bins.\r"
(gdb) kill
Kill the program being debugged? (y or n) y
(gdb) quit
[eric9709@programming bomb60]$ vim
[eric9709@programming bomb60]$ vim solution.txt
[eric9709@programming bomb60]$ ./bomb solution.txt 
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!

BOOM!!!
The bomb has blown up.
[eric9709@programming bomb60]$ vim solution.txt
[eric9709@programming bomb60]$ ./bomb solution.txt 
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
So you think you can stop the bomb with ctrl-c, do you?
Well...OK. :-)
[eric9709@programming bomb60]$ gdb bomb
GNU gdb (GDB) CentOS (7.0.1-45.el5.centos)
Copyright (C) 2009 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/std/eric9709/CSED211/Lab3/bomb60/bomb...done.
(gdb) disas phase_5
Dump of assembler code for function phase_5:
0x0000000000400ff1 <phase_5+0>:	push   %rbx
0x0000000000400ff2 <phase_5+1>:	sub    $0x10,%rsp
0x0000000000400ff6 <phase_5+5>:	mov    %rdi,%rbx
0x0000000000400ff9 <phase_5+8>:	callq  0x401220 <string_length>
0x0000000000400ffe <phase_5+13>:	cmp    $0x6,%eax
0x0000000000401001 <phase_5+16>:	je     0x401008 <phase_5+23>
0x0000000000401003 <phase_5+18>:	callq  0x40131b <explode_bomb>
0x0000000000401008 <phase_5+23>:	mov    $0x0,%edx
0x000000000040100d <phase_5+28>:	mov    %rsp,%rdi
0x0000000000401010 <phase_5+31>:	movsbq (%rdx,%rbx,1),%rax
0x0000000000401015 <phase_5+36>:	and    $0xf,%eax
0x0000000000401018 <phase_5+39>:	movzbl 0x4024a0(%rax),%eax
0x000000000040101f <phase_5+46>:	mov    %al,(%rdx,%rdi,1)
0x0000000000401022 <phase_5+49>:	add    $0x1,%rdx
0x0000000000401026 <phase_5+53>:	cmp    $0x6,%rdx
0x000000000040102a <phase_5+57>:	jne    0x401010 <phase_5+31>
0x000000000040102c <phase_5+59>:	movb   $0x0,0x6(%rsp)
0x0000000000401031 <phase_5+64>:	mov    $0x402444,%esi
0x0000000000401036 <phase_5+69>:	mov    %rsp,%rdi
0x0000000000401039 <phase_5+72>:	callq  0x40123f <strings_not_equal>
0x000000000040103e <phase_5+77>:	test   %eax,%eax
0x0000000000401040 <phase_5+79>:	je     0x401047 <phase_5+86>
0x0000000000401042 <phase_5+81>:	callq  0x40131b <explode_bomb>
0x0000000000401047 <phase_5+86>:	add    $0x10,%rsp
0x000000000040104b <phase_5+90>:	pop    %rbx
0x000000000040104c <phase_5+91>:	retq   
End of assembler dump.
(gdb) disas string_length 
Dump of assembler code for function string_length:
0x0000000000401220 <string_length+0>:	mov    $0x0,%eax
0x0000000000401225 <string_length+5>:	cmpb   $0x0,(%rdi)
0x0000000000401228 <string_length+8>:	je     0x40123d <string_length+29>
0x000000000040122a <string_length+10>:	mov    %rdi,%rdx
0x000000000040122d <string_length+13>:	movzbl 0x1(%rdx),%eax
0x0000000000401231 <string_length+17>:	add    $0x1,%rdx
0x0000000000401235 <string_length+21>:	test   %al,%al
0x0000000000401237 <string_length+23>:	jne    0x40122d <string_length+13>
0x0000000000401239 <string_length+25>:	mov    %edx,%eax
0x000000000040123b <string_length+27>:	sub    %edi,%eax
0x000000000040123d <string_length+29>:	repz retq 
End of assembler dump.
(gdb) disas phase_5
Dump of assembler code for function phase_5:
0x0000000000400ff1 <phase_5+0>:	push   %rbx
0x0000000000400ff2 <phase_5+1>:	sub    $0x10,%rsp
0x0000000000400ff6 <phase_5+5>:	mov    %rdi,%rbx
0x0000000000400ff9 <phase_5+8>:	callq  0x401220 <string_length>
0x0000000000400ffe <phase_5+13>:	cmp    $0x6,%eax
0x0000000000401001 <phase_5+16>:	je     0x401008 <phase_5+23>
0x0000000000401003 <phase_5+18>:	callq  0x40131b <explode_bomb>
0x0000000000401008 <phase_5+23>:	mov    $0x0,%edx
0x000000000040100d <phase_5+28>:	mov    %rsp,%rdi
0x0000000000401010 <phase_5+31>:	movsbq (%rdx,%rbx,1),%rax
0x0000000000401015 <phase_5+36>:	and    $0xf,%eax
0x0000000000401018 <phase_5+39>:	movzbl 0x4024a0(%rax),%eax
0x000000000040101f <phase_5+46>:	mov    %al,(%rdx,%rdi,1)
0x0000000000401022 <phase_5+49>:	add    $0x1,%rdx
0x0000000000401026 <phase_5+53>:	cmp    $0x6,%rdx
0x000000000040102a <phase_5+57>:	jne    0x401010 <phase_5+31>
0x000000000040102c <phase_5+59>:	movb   $0x0,0x6(%rsp)
0x0000000000401031 <phase_5+64>:	mov    $0x402444,%esi
0x0000000000401036 <phase_5+69>:	mov    %rsp,%rdi
0x0000000000401039 <phase_5+72>:	callq  0x40123f <strings_not_equal>
0x000000000040103e <phase_5+77>:	test   %eax,%eax
0x0000000000401040 <phase_5+79>:	je     0x401047 <phase_5+86>
0x0000000000401042 <phase_5+81>:	callq  0x40131b <explode_bomb>
0x0000000000401047 <phase_5+86>:	add    $0x10,%rsp
0x000000000040104b <phase_5+90>:	pop    %rbx
0x000000000040104c <phase_5+91>:	retq   
End of assembler dump.
(gdb) x/s 0x4024a0
0x4024a0 <array.3310>:	 "maduiersnfotvbyl%d %d %s"
(gdb) x/s 0x4024a6
0x4024a6 <array.3310+6>:	 "rsnfotvbyl%d %d %s"
(gdb) x/s 0x402444
0x402444 <__dso_handle+444>:	 "flyers"
(gdb) r solution.txt 
Starting program: /home/std/eric9709/CSED211/Lab3/bomb60/bomb solution.txt
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x2aaaaaaab000
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
That's number 2.  Keep going!
Halfway there!
So you got that one.  Try this one.
flyers

BOOM!!!
The bomb has blown up.

Program exited with code 010.
(gdb) disas strings_not_equal 
Dump of assembler code for function strings_not_equal:
0x000000000040123f <strings_not_equal+0>:	push   %r12
0x0000000000401241 <strings_not_equal+2>:	push   %rbp
0x0000000000401242 <strings_not_equal+3>:	push   %rbx
0x0000000000401243 <strings_not_equal+4>:	mov    %rdi,%rbp
0x0000000000401246 <strings_not_equal+7>:	mov    %rsi,%r12
0x0000000000401249 <strings_not_equal+10>:	callq  0x401220 <string_length>
0x000000000040124e <strings_not_equal+15>:	mov    %eax,%ebx
0x0000000000401250 <strings_not_equal+17>:	mov    %r12,%rdi
0x0000000000401253 <strings_not_equal+20>:	callq  0x401220 <string_length>
0x0000000000401258 <strings_not_equal+25>:	cmp    %eax,%ebx
0x000000000040125a <strings_not_equal+27>:	jne    0x40128e <strings_not_equal+79>
0x000000000040125c <strings_not_equal+29>:	movzbl 0x0(%rbp),%eax
0x0000000000401260 <strings_not_equal+33>:	test   %al,%al
0x0000000000401262 <strings_not_equal+35>:	je     0x401295 <strings_not_equal+86>
0x0000000000401264 <strings_not_equal+37>:	mov    %rbp,%rcx
0x0000000000401267 <strings_not_equal+40>:	mov    %r12,%rdx
0x000000000040126a <strings_not_equal+43>:	cmp    (%r12),%al
0x000000000040126e <strings_not_equal+47>:	je     0x401283 <strings_not_equal+68>
0x0000000000401270 <strings_not_equal+49>:	jmp    0x40128e <strings_not_equal+79>
0x0000000000401272 <strings_not_equal+51>:	movzbl 0x1(%rdx),%eax
0x0000000000401276 <strings_not_equal+55>:	add    $0x1,%rcx
0x000000000040127a <strings_not_equal+59>:	add    $0x1,%rdx
0x000000000040127e <strings_not_equal+63>:	cmp    %al,%sil
0x0000000000401281 <strings_not_equal+66>:	jne    0x40128e <strings_not_equal+79>
0x0000000000401283 <strings_not_equal+68>:	movzbl 0x1(%rcx),%esi
0x0000000000401287 <strings_not_equal+72>:	test   %sil,%sil
0x000000000040128a <strings_not_equal+75>:	jne    0x401272 <strings_not_equal+51>
---Type <return> to continue, or q <return> to quit---q
Quit
(gdb) disas main
Dump of assembler code for function main:
0x0000000000400c98 <main+0>:	push   %rbx
0x0000000000400c99 <main+1>:	mov    %rsi,%rbx
0x0000000000400c9c <main+4>:	cmp    $0x1,%edi
0x0000000000400c9f <main+7>:	jne    0x400cb1 <main+25>
0x0000000000400ca1 <main+9>:	mov    0x202c78(%rip),%rax        # 0x603920 <stdin@@GLIBC_2.2.5>
0x0000000000400ca8 <main+16>:	mov    %rax,0x202c99(%rip)        # 0x603948 <infile>
0x0000000000400caf <main+23>:	jmp    0x400d07 <main+111>
0x0000000000400cb1 <main+25>:	cmp    $0x2,%edi
0x0000000000400cb4 <main+28>:	jne    0x400ceb <main+83>
0x0000000000400cb6 <main+30>:	mov    $0x402290,%esi
0x0000000000400cbb <main+35>:	mov    0x8(%rbx),%rdi
0x0000000000400cbf <main+39>:	callq  0x400a80 <fopen@plt>
0x0000000000400cc4 <main+44>:	mov    %rax,0x202c7d(%rip)        # 0x603948 <infile>
0x0000000000400ccb <main+51>:	test   %rax,%rax
0x0000000000400cce <main+54>:	jne    0x400d07 <main+111>
0x0000000000400cd0 <main+56>:	mov    0x8(%rbx),%rdx
0x0000000000400cd4 <main+60>:	mov    (%rbx),%rsi
0x0000000000400cd7 <main+63>:	mov    $0x402292,%edi
0x0000000000400cdc <main+68>:	callq  0x400a10 <printf@plt>
0x0000000000400ce1 <main+73>:	mov    $0x8,%edi
0x0000000000400ce6 <main+78>:	callq  0x400a60 <exit@plt>
0x0000000000400ceb <main+83>:	mov    (%rsi),%rsi
0x0000000000400cee <main+86>:	mov    $0x4022af,%edi
0x0000000000400cf3 <main+91>:	mov    $0x0,%eax
0x0000000000400cf8 <main+96>:	callq  0x400a10 <printf@plt>
0x0000000000400cfd <main+101>:	mov    $0x8,%edi
0x0000000000400d02 <main+106>:	callq  0x400a60 <exit@plt>
---Type <return> to continue, or q <return> to quit---
0x0000000000400d07 <main+111>:	callq  0x401529 <initialize_bomb>
0x0000000000400d0c <main+116>:	mov    $0x402318,%edi
0x0000000000400d11 <main+121>:	callq  0x400a50 <puts@plt>
0x0000000000400d16 <main+126>:	mov    $0x402358,%edi
0x0000000000400d1b <main+131>:	callq  0x400a50 <puts@plt>
0x0000000000400d20 <main+136>:	callq  0x4013ff <read_line>
0x0000000000400d25 <main+141>:	mov    %rax,%rdi
0x0000000000400d28 <main+144>:	callq  0x40104d <phase_1>
0x0000000000400d2d <main+149>:	callq  0x4012a3 <phase_defused>
0x0000000000400d32 <main+154>:	mov    $0x402388,%edi
0x0000000000400d37 <main+159>:	callq  0x400a50 <puts@plt>
0x0000000000400d3c <main+164>:	callq  0x4013ff <read_line>
0x0000000000400d41 <main+169>:	mov    %rax,%rdi
0x0000000000400d44 <main+172>:	callq  0x400fa8 <phase_2>
0x0000000000400d49 <main+177>:	callq  0x4012a3 <phase_defused>
0x0000000000400d4e <main+182>:	mov    $0x4022c9,%edi
0x0000000000400d53 <main+187>:	callq  0x400a50 <puts@plt>
0x0000000000400d58 <main+192>:	callq  0x4013ff <read_line>
0x0000000000400d5d <main+197>:	mov    %rax,%rdi
0x0000000000400d60 <main+200>:	callq  0x4010ca <phase_3>
0x0000000000400d65 <main+205>:	callq  0x4012a3 <phase_defused>
0x0000000000400d6a <main+210>:	mov    $0x4022e7,%edi
0x0000000000400d6f <main+215>:	callq  0x400a50 <puts@plt>
0x0000000000400d74 <main+220>:	callq  0x4013ff <read_line>
0x0000000000400d79 <main+225>:	mov    %rax,%rdi
0x0000000000400d7c <main+228>:	callq  0x401069 <phase_4>
0x0000000000400d81 <main+233>:	callq  0x4012a3 <phase_defused>
0x0000000000400d86 <main+238>:	mov    $0x4023b8,%edi
---Type <return> to continue, or q <return> to quit---
0x0000000000400d8b <main+243>:	callq  0x400a50 <puts@plt>
0x0000000000400d90 <main+248>:	callq  0x4013ff <read_line>
0x0000000000400d95 <main+253>:	mov    %rax,%rdi
0x0000000000400d98 <main+256>:	callq  0x400ff1 <phase_5>
0x0000000000400d9d <main+261>:	callq  0x4012a3 <phase_defused>
0x0000000000400da2 <main+266>:	mov    $0x4022f6,%edi
0x0000000000400da7 <main+271>:	callq  0x400a50 <puts@plt>
0x0000000000400dac <main+276>:	callq  0x4013ff <read_line>
0x0000000000400db1 <main+281>:	mov    %rax,%rdi
0x0000000000400db4 <main+284>:	callq  0x400e93 <phase_6>
0x0000000000400db9 <main+289>:	callq  0x4012a3 <phase_defused>
0x0000000000400dbe <main+294>:	mov    $0x0,%eax
0x0000000000400dc3 <main+299>:	pop    %rbx
0x0000000000400dc4 <main+300>:	retq   
End of assembler dump.
(gdb) disas phase_5
Dump of assembler code for function phase_5:
0x0000000000400ff1 <phase_5+0>:	push   %rbx
0x0000000000400ff2 <phase_5+1>:	sub    $0x10,%rsp
0x0000000000400ff6 <phase_5+5>:	mov    %rdi,%rbx
0x0000000000400ff9 <phase_5+8>:	callq  0x401220 <string_length>
0x0000000000400ffe <phase_5+13>:	cmp    $0x6,%eax
0x0000000000401001 <phase_5+16>:	je     0x401008 <phase_5+23>
0x0000000000401003 <phase_5+18>:	callq  0x40131b <explode_bomb>
0x0000000000401008 <phase_5+23>:	mov    $0x0,%edx
0x000000000040100d <phase_5+28>:	mov    %rsp,%rdi
0x0000000000401010 <phase_5+31>:	movsbq (%rdx,%rbx,1),%rax
0x0000000000401015 <phase_5+36>:	and    $0xf,%eax
0x0000000000401018 <phase_5+39>:	movzbl 0x4024a0(%rax),%eax
0x000000000040101f <phase_5+46>:	mov    %al,(%rdx,%rdi,1)
0x0000000000401022 <phase_5+49>:	add    $0x1,%rdx
0x0000000000401026 <phase_5+53>:	cmp    $0x6,%rdx
0x000000000040102a <phase_5+57>:	jne    0x401010 <phase_5+31>
0x000000000040102c <phase_5+59>:	movb   $0x0,0x6(%rsp)
0x0000000000401031 <phase_5+64>:	mov    $0x402444,%esi
0x0000000000401036 <phase_5+69>:	mov    %rsp,%rdi
0x0000000000401039 <phase_5+72>:	callq  0x40123f <strings_not_equal>
0x000000000040103e <phase_5+77>:	test   %eax,%eax
0x0000000000401040 <phase_5+79>:	je     0x401047 <phase_5+86>
0x0000000000401042 <phase_5+81>:	callq  0x40131b <explode_bomb>
0x0000000000401047 <phase_5+86>:	add    $0x10,%rsp
0x000000000040104b <phase_5+90>:	pop    %rbx
0x000000000040104c <phase_5+91>:	retq   
End of assembler dump.
(gdb) x/s 0x4024a6
0x4024a6 <array.3310+6>:	 "rsnfotvbyl%d %d %s"
(gdb) Quit
(gdb) Quit
(gdb) 
Connection closed by foreign host.

Disconnected from remote host(postech) at 23:38:32.

Type `help' to learn how to use Xshell prompt.
[c:\~]$ 

Host 'programming.postech.ac.kr' resolved to 141.223.2.22.
Connecting to 141.223.2.22:2022...
Connection established.
To escape to local shell, press 'Ctrl+Alt+]'.

Last login: Fri Sep 21 22:30:36 2018 from 119.202.93.168
=========================================
      Welcome to programming server
  Inquiry: 279-2520, hemos@postech.ac.kr
=========================================
[eric9709@programming ~]$ cd CSED211
[eric9709@programming CSED211]$ cd Lab
-bash: cd: Lab: 그런 파일이나 디렉토리가 없음
[eric9709@programming CSED211]$ cd Lab3
[eric9709@programming Lab3]$ cd bomb60
[eric9709@programming bomb60]$ gdb bomb
GNU gdb (GDB) CentOS (7.0.1-45.el5.centos)
Copyright (C) 2009 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>...
Reading symbols from /home/std/eric9709/CSED211/Lab3/bomb60/bomb...done.
(gdb) disas phase_5
Dump of assembler code for function phase_5:
0x0000000000400ff1 <phase_5+0>:	push   %rbx
0x0000000000400ff2 <phase_5+1>:	sub    $0x10,%rsp
0x0000000000400ff6 <phase_5+5>:	mov    %rdi,%rbx
0x0000000000400ff9 <phase_5+8>:	callq  0x401220 <string_length>
0x0000000000400ffe <phase_5+13>:	cmp    $0x6,%eax
0x0000000000401001 <phase_5+16>:	je     0x401008 <phase_5+23>
0x0000000000401003 <phase_5+18>:	callq  0x40131b <explode_bomb>
0x0000000000401008 <phase_5+23>:	mov    $0x0,%edx
0x000000000040100d <phase_5+28>:	mov    %rsp,%rdi
0x0000000000401010 <phase_5+31>:	movsbq (%rdx,%rbx,1),%rax
0x0000000000401015 <phase_5+36>:	and    $0xf,%eax
0x0000000000401018 <phase_5+39>:	movzbl 0x4024a0(%rax),%eax
0x000000000040101f <phase_5+46>:	mov    %al,(%rdx,%rdi,1)
0x0000000000401022 <phase_5+49>:	add    $0x1,%rdx
0x0000000000401026 <phase_5+53>:	cmp    $0x6,%rdx
0x000000000040102a <phase_5+57>:	jne    0x401010 <phase_5+31>
0x000000000040102c <phase_5+59>:	movb   $0x0,0x6(%rsp)
0x0000000000401031 <phase_5+64>:	mov    $0x402444,%esi
0x0000000000401036 <phase_5+69>:	mov    %rsp,%rdi
0x0000000000401039 <phase_5+72>:	callq  0x40123f <strings_not_equal>
0x000000000040103e <phase_5+77>:	test   %eax,%eax
0x0000000000401040 <phase_5+79>:	je     0x401047 <phase_5+86>
0x0000000000401042 <phase_5+81>:	callq  0x40131b <explode_bomb>
0x0000000000401047 <phase_5+86>:	add    $0x10,%rsp
0x000000000040104b <phase_5+90>:	pop    %rbx
0x000000000040104c <phase_5+91>:	retq   
End of assembler dump.
(gdb) 

